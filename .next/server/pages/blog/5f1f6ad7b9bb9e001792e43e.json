{"pageProps":{"data":{"pictures":["https://res.cloudinary.com/beloved/image/upload/v1595894487/Udemy/zca2erxa06h8pf6l7bai.jpg"],"_id":"5f1f6ad7b9bb9e001792e43e","title":"Working with Objects in React","description":"Mobile apps of today rely on complex objects to represent a range of data types and values, that range from component props to server responses, objects to arrays (and converting between the two), functions and classes.\nA class in JavaScript (introduced in the ECMAScript6 [2015] edition) is a type of function, declared with the class keyword instead of the function keyword and implements the constructor, introduces context with this, class properties, and the ability for instantiation. An object in JavaScript however is a type of variable that can contain many values. Instantiating classes will therefore instantiate a variable too, albeit with values persisting to the class’s structure.\nThis piece will firstly discuss object capabilities at a high level, then explore various ways to use and manipulate them along with the syntax used to do so.\nObjects at a High Level\nTo clear up any ambiguity before continuing, an object in JavaScript can be represented like so:\n// defining a multi-dimensional object\nconst myObj = {\n  name: 'Ross',\n  writing: true,\n  enjoyment: 10,\n  meta: {\n    minutesWriting: 20,\n    minutesProcrastinating: 0,\n  }\n};\nDefining an object with const will make it immutable. If the object needs to be manipulated further to get to a final state, use let instead.\nObjects are typically defined in camel-case styling, and can be multi-dimensional, like the above example demonstrates with the meta property. Concretely, an object is made up of properties and values — even a class: Running console.log on an instantiated class object will reveal its underlying structure in the same way as the example above, but with more data types within those property values, including functions.\nFunctions can also be object property values. Consider the following example that defines an object created for a React Context provider, that will allow any component under it to retrieve a toggled boolean, as well as a function to actually toggle that value between true and false:","body":"The concepts discussed here can also be applied to React JS (React for the web), as the features of the two versions are identical at the component level. Where React for the DOM and React Native differ is their handling of components (pertaining to DOM elements or native mobile components), not in the framework’s defining features like components, props, state, refs, context, and others.","__v":0}},"__N_SSG":true}