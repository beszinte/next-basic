{"pageProps":{"posts":[{"pictures":["https://res.cloudinary.com/beloved/image/upload/v1595894487/Udemy/zca2erxa06h8pf6l7bai.jpg"],"_id":"5f1f6ad7b9bb9e001792e43e","title":"Working with Objects in React","description":"Mobile apps of today rely on complex objects to represent a range of data types and values, that range from component props to server responses, objects to arrays (and converting between the two), functions and classes.\nA class in JavaScript (introduced in the ECMAScript6 [2015] edition) is a type of function, declared with the class keyword instead of the function keyword and implements the constructor, introduces context with this, class properties, and the ability for instantiation. An object in JavaScript however is a type of variable that can contain many values. Instantiating classes will therefore instantiate a variable too, albeit with values persisting to the class’s structure.\nThis piece will firstly discuss object capabilities at a high level, then explore various ways to use and manipulate them along with the syntax used to do so.\nObjects at a High Level\nTo clear up any ambiguity before continuing, an object in JavaScript can be represented like so:\n// defining a multi-dimensional object\nconst myObj = {\n  name: 'Ross',\n  writing: true,\n  enjoyment: 10,\n  meta: {\n    minutesWriting: 20,\n    minutesProcrastinating: 0,\n  }\n};\nDefining an object with const will make it immutable. If the object needs to be manipulated further to get to a final state, use let instead.\nObjects are typically defined in camel-case styling, and can be multi-dimensional, like the above example demonstrates with the meta property. Concretely, an object is made up of properties and values — even a class: Running console.log on an instantiated class object will reveal its underlying structure in the same way as the example above, but with more data types within those property values, including functions.\nFunctions can also be object property values. Consider the following example that defines an object created for a React Context provider, that will allow any component under it to retrieve a toggled boolean, as well as a function to actually toggle that value between true and false:","body":"The concepts discussed here can also be applied to React JS (React for the web), as the features of the two versions are identical at the component level. Where React for the DOM and React Native differ is their handling of components (pertaining to DOM elements or native mobile components), not in the framework’s defining features like components, props, state, refs, context, and others.","__v":0},{"pictures":["https://res.cloudinary.com/beloved/image/upload/v1595894388/Udemy/ww9dqgoavjs8nkvkfnk0.jpg"],"_id":"5f1f6a74b9bb9e001792e43d","title":"7 Essential Non-Technical Skills Every Successful Developer Should Have","description":"It is indeed true that you need strong technical skills as a developer to succeed. But it’s also true that it takes more than just technological expertise to rise through the ranks and win the opportunity to command teams, projects, and eventually businesses.\nBy developing and broadening your non-technical skills, you increase the chances of not just landing a “good job” but a great career in technology as well.\n“The soft skills are the hard skills. People who master the critical leadership skills today are anything but touchy-feely — they’re direct, they’re clear, they’re compassionate, they’re no-nonsense. But they’re not soft.” — Amy Edmondson\nHere is a list of non-technical skills that will ensure you a great career in tech.\n1. Self-Discipline\nIt is easy for someone to get distracted in life. Self-discipline is what helps you focus on your goals. A disciplined developer is able to do things on time, take responsibility for what they do, and more. Being responsible for your actions is essential for you to succeed in your professional life.\n“Taking responsibility when things go wrong is crucially important to building trust with others and learning from your mistakes.” — Ryan Ferguson\nA self-disciplined developer not only keeps themselves on track but also helps lift up others as well.\nAlthough you don’t necessarily need to have a strict code of conduct, you still need a moderate level of self-discipline that keeps you and your goals in sync.\n2. People Skills\n“You can have brilliant ideas, but if you can’t get them across, your ideas won’t get you anywhere.” — Lee Iacocca\nPeople always prefer to work with someone who is able to connect with them on a humane level. So the more you show these abilities, the faster your career advances.\nAccording to Science of People’s Vanessa Van Edwards, people skills are the tools you use to communicate and interact effectively with others. Therefore, it reduces the chance of miscommunication in the workplace, which is very important.\nYour project team or workplace may contain a lot of diversity, and for you to fit right in, you need excellent people skills. This would result in your team completing projects exceptionally well — and you would stand out.\n3. Intellectual Curiosity\nTo go up the ladder, developers should start asking questions and looking at problems from different angles to get better solutions. Going with the flow will not help you in this regard.\n","body":"As developers, we all would like to get ourselves a well-paid job. We also probably have plans to gradually move up the corporate ladder and reach success. Unfortunately, not everyone manages to reach this goal. Some find it really hard to go up the ladder, while others find it difficult to land a developer job.","__v":0},{"pictures":["https://res.cloudinary.com/beloved/image/upload/v1595894282/Udemy/wzcux8epelmpxwjwj5nd.jpg"],"_id":"5f1f6a0bb9bb9e001792e43c","title":"From React to React Native","description":"Why React Native?\nThe biggest advantage lies in cross-platform development. With React Native, you have a single codebase that can be built for both iOS and Android devices. For most companies, this saves a lot of time and money, as native mobile development requires two different codebases and two different teams — native iOS development being done in Swift and native Android development being done in Java/Kotlin. Especially if you’re a developer who knows JavaScript but not Swift, Java, or Kotlin, it makes sense to simply use React Native to develop a mobile app because of faster shipping time (i.e. the time saved from learning a new language and development environment).\nAnother emerging framework for cross-platform development is Flutter, an open-source UI toolkit created by Google. The only disadvantages that I know of are that it uses the Dart language (so you’ll need to spend time learning it) and it’s relatively new, so there may be not as much community support. However, I can see Flutter as the new mainstream way of cross-platform development in the future, so I think it’s definitely worth learning if you have the time. But for now, React Native is still the king of this cross-platform business.","body":"In my experience, going from native Android development to React Native has simply been a pleasure. Although there is generally less flexibility, development is much faster and cleaner in my opinion, and I just love it. So without further ado, let’s get started.\n","__v":0},{"pictures":["https://res.cloudinary.com/beloved/image/upload/v1595894167/Udemy/rb3kxw0lxxgshc8bomwx.png"],"_id":"5f1f6997b9bb9e001792e43b","title":"How to add React Router to your React App","body":"React-router is a tool that can be implemented on top of a React application. React, by itself, does not dictate anything about routing. Routing can sync the application with the URL along with the navigation features offered by the browser such as the address bar and navigation buttons enhancing the capabilities of your React application. ","description":"Server-side Vs. Client-side Routing\nBefore we begin implementing react-router, let’s discuss the difference between server and client side routing. Server-side is the more traditional approach where we define the routes on the server. Client-side is the more modern approach where we use client-side Javascript to dynamically change what gets shown to the screen. With client-side routing, we handle the rendering of our application.\nThe process on the server-side would be a client making a request to the server and the server responding with what HTML to render. The process on the client-side would involve watching for URL changes and based on those changes, render a specific component for the path.\nWith client-side, when a user clicks for a different page or gets redirected based on some action, that’s going to be handled with client-side Javascript meaning we do not need to make the roundtrip on the server to re-enter the page. Instead, we use the HTML history API available by browsers that allows us to watch for URL changes and run some Javascript code when it does change.\nWith react-router, we’re able to render an application on the fly with client-side Javascript that’s going to allow us to create a Single Page Application where we switch components emulating the “page change.”\nGetting Started\nTo get started with implementing react-router, you’ll need to have a React application. If you need to create one, you can use the following command to generate one and change into the directory generated:\nnpx create-react-app <app_name>\ncd <app_name>\nReact-router has three packages: react-router, react-router-dom, react-router-native. React-router almost never has to be installed whereas react-router-dom is specific to the browser and react-router-native is specific to React Native. We will be focusing on the website and thus will need to install react-router-dom using:","__v":0},{"pictures":["https://res.cloudinary.com/beloved/image/upload/v1595894027/Udemy/fm5rmfuwdls1rbjdvosd.png"],"_id":"5f1f690bb9bb9e001792e439","title":"How to Create a JavaScript Network Graph","body":"Network graphs are a special, very interesting form of data visualization. Unlike more traditional chart types like bar graphs or pie charts, a network graph does a bit more than visualize numerical data.","description":"uilding a JS Network Graph From Scratch\nBasically, to build a JS-based network graph, we need to follow the same four steps as with literally any JavaScript chart:\nCreate an HTML page.\nAdd the necessary scripts.\nLoad the data that will be visualized.\nDraw the chart.\n1. Create an HTML page\nThe first step towards building our network graph is to setup an HTML page. This involves creating a basic HTML template for the chart as well as adding the necessary CSS rules.\nHere we also add a title for our HTML page and create a div to contain the chart.\n<!DOCTYPE html>\n<html>\n  <head>\n    <title>JavaScript Network Graph</title>\n    <style>\n      html, body, #container {\n        width: 100%;\n        height: 100%;\n        margin: 0;\n        padding: 0;\n      }\n    </style>\n  </head>\n  <body>\n    <div id=\"container\"></div>\n    <script>\n      // The chart code goes here.\n    </script>\n  </body>\n</html>\nI’ve set the CSS to make the container div fill the entire page. You may want to change this depending on your use case, of course.\n2. Add the necessary scripts\nThe second step is to add all the necessary scripts. We will be using AnyChart JS Charts which is a very easy to use and powerful JavaScript charting library. I personally love AnyChart because it is great for both beginners and pros alike. It lets you quickly prototype data visualizations and really helps speed up the entire development process.\nTo make good use of the AnyChart library, we need to add its dedicated modules. In this tutorial, we will be using three of them. The Core and Graph modules are required to draw our network graph, and the Data Adapter module will help us import the Game of Thrones JSON data (more on that shortly).","__v":0},{"pictures":["https://res.cloudinary.com/beloved/image/upload/v1595893925/Udemy/f6mawtvujhkgmjbysary.jpg"],"_id":"5f1f68a5b9bb9e001792e438","title":"6 Things Programmers Know Are Bad But Still Do Anyway","body":"There can be various reasons why programmers choose to do these bad things — for the thrill, because of laziness, etc. One thing is certain: You shouldn’t do the things listed in this article too often. Granted, sometimes it just feels good to be bad.","description":"\n1. Quick and Dirty Solutions\nSometimes you know the solution you chose is suboptimal. However, this suboptimal solution gets implemented because it's quick and the code works. This leaves you with more time to fix other stuff. Nothing wrong with that, right?\nIt feels good to fix a certain problem within a matter of time. But making your code work is only a tiny part of the job. The problem with quick and dirty solutions is that this approach brings some serious deficiencies that lead to more technical debt.\nWhenever you bring another one of your quick and dirty solutions to review, you should be aware of the fact that these “solutions” can be devastating for the morale of the team.\nIn your defense, there might be some cases where quick and dirty may not really matter. It might actually be the right way to go in certain situations (e.g. when code has a short lifespan).\nBut when you need code for the long run, fixing things in a quick and dirty way will come back to bite you. Don’t justify these solutions by saying that you’ll clean them up later. We’ve all heard that fairy tale before.\n2. Silently Swallowing Errors\nSilently swallowing errors is a mistake I’ve seen plenty of times from inexperienced developers. However, seasoned developers tend to silently swallow errors as well. And unlike inexperienced developers, they do it on purpose.\nWhen you’ve got loads of stuff to do and deadlines come into play, you don’t have time for every issue that comes rolling into the bug tracker. Instead of being disturbed by all the potential notifications, you sometimes choose to silently swallow the errors. This allows you to focus on all the remaining tasks you still have to do.\nOther times, swallowing errors silently happens unintentionally. Some reasons for this can be a lack of experience or not knowing what’s going on in the code on a lower level.\nYou can think of some use cases where swallowing errors would be preferable (e.g. when creating a log file fails for some reason since there is nowhere to report this).\nHowever, as a rule of thumb, you don’t want to silently swallow errors.\n3. Over-Engineering\nImplementing certain design patterns for the heck of it is something that most developers have done. Just because you see an opportunity to implement a design pattern doesn’t mean you should.\nThis is a classic form of over-engineering, and all you’re going to accomplish with it is add more technical depth to the codebase. Over-engineering tends to happen more often when developers aren’t getting challenged enough. When this happens, they start to look for challenges themselves.\nAnother reason why over-engineering might happen is because of assumptions — the assumption that adding a certain piece of code might be helpful in the future. This additional piece of code gets added to the codebase, but it probably never gets used. Maybe the best way to explain over-engineering is that it is code that solves problems that don’t exist.\n","__v":0},{"pictures":["https://res.cloudinary.com/beloved/image/upload/v1595893763/Udemy/le9kh0jkuu26l2wa18ll.png"],"_id":"5f1f6803b9bb9e001792e437","title":"Client-Side Storage in JavaScript","body":"As the name suggests, client-side storage allows the user to store data on the client (i.e. user’s browser). Conversely, server-side storage will store data on the server (i.e. an external database).","description":"You probably have heard of cookies. They are the most classic type of client-side storage and have been used by sites since the early days of the web.\nCookies are sent from the server to the client and then stored on the client. The stored cookie can then be retrieved and sent back to the server whenever the client makes a request to the server again. Typically, cookies are used to manage account sessions, store user information and track user data.\nHowever, because cookies are the oldest forms of client-side storage, they have a few security issues and storage limitations, which make them an unsuitable option to store client-side data.\nFor more information on the security issues of cookies, read here.\nCRUD Example\n//Create\ndocument.cookie = \"name=victoria\";\n\n//Read\nconsole.log( document.cookie );\n\n//Update\ndocument.cookie = \"name=victoria lo\";\n\n//Delete - Just set an expiry date that has passed\ndocument.cookie = \"name=victoria lo ; expires = Thu, 01 Jan 2010 00:00:00 GMT\"\n2. Web Storage API\nThe Web Storage API is an API which stores key-value pairs of data in the client. This simple and intuitive syntax allows easy storage and retrieval of strings or stringified JSON data.\nThere are 2 types of web storage in this API: Local Storage and Session Storage.\nLocal Storage vs Session Storage\nSome distinct differences between the 2 types of web storage to note.","__v":0},{"pictures":["https://res.cloudinary.com/beloved/image/upload/v1595893672/Udemy/kknwnpsthemxi8cab3fk.jpg"],"_id":"5f1f67a9b9bb9e001792e436","title":"Web Development 2020 vs 2010","body":"Things have changed pretty fast from what was a decade ago for web development and the facts are totally mind-blowing. I mean a web developer now makes mobile apps, desktop app, backend API, games and so much more. ","description":"Web Development a decade ago\nBe thankful if you are a new developer because trust me! You would hate web development just a decade ago! First of all, nowadays if you are web developer having sound knowledge of JavaScript can not just make simple frontend websites but from backend API to mobile apps, you can do a lot of stuff with the JavaScript.\nHowever, just a decade ago you didn’t have React, Angular or Node along with npm packages to help you out. This was the time of LAMP Stack where PHP was the king along with JavaScript which was not that good at the time and was slow. The modern ES6+ is filled so many cool technologies and is highly optimized along with providing you support for so many things. For Frontend, we use to have JQuery library ( still many people use it though we have ES6+ cool features & I believe it is not needed ) and for serverside PHP was leading.\nThe coming of client-side JS frameworks in 2010\n2010 was the point where so many cool frameworks came to the picture of web development. The Ancestor to the modern JavaScript client-side frameworks and libraries that dominated just a decade ago are as follow:\nKnockoutJS ( release date: July 5, 2010 )\nAngularJS ( release date: October 20, 2010 )\nBackboneJS ( release date: October 13, 2010 )\nUnderscore ( release date: October 28, 2009 )\nJQuery ( release date: August 26, 2006 )\nReact, Angular and Vue are dominating the market in 2020 but this was not the case 10 years ago. Knockout, AngularJS and backbone were the rising stars and were developers favourites.\nMEAN / MERN Stack is the dominating stack in 2020 but a decade ago the LAMP Stack ( “L” Linux — “A” Apache — “M” MySQL — “P” PHP ) that was taking over the community by storm. This is how our old friend Mark Zuckenberg build Facebook back from his dorm for the first time.\nHowever, at the end of 2010 things started to change with the launch of client-side frameworks and AngularJS was leading all the framework since it was powered by Google and was my first framework love.","__v":0},{"pictures":["https://res.cloudinary.com/beloved/image/upload/v1595893627/Udemy/xicl0wk4dasj5lzpls1q.png"],"_id":"5f1f677bb9bb9e001792e435","title":"Web Development 2020 vs 2010","body":"Things have changed pretty fast from what was a decade ago for web development and the facts are totally mind-blowing. I mean a web developer now makes mobile apps, desktop app, backend API, games and so much more. ","description":"Web Development a decade ago\nBe thankful if you are a new developer because trust me! You would hate web development just a decade ago! First of all, nowadays if you are web developer having sound knowledge of JavaScript can not just make simple frontend websites but from backend API to mobile apps, you can do a lot of stuff with the JavaScript.\nHowever, just a decade ago you didn’t have React, Angular or Node along with npm packages to help you out. This was the time of LAMP Stack where PHP was the king along with JavaScript which was not that good at the time and was slow. The modern ES6+ is filled so many cool technologies and is highly optimized along with providing you support for so many things. For Frontend, we use to have JQuery library ( still many people use it though we have ES6+ cool features & I believe it is not needed ) and for serverside PHP was leading.\nThe coming of client-side JS frameworks in 2010\n2010 was the point where so many cool frameworks came to the picture of web development. The Ancestor to the modern JavaScript client-side frameworks and libraries that dominated just a decade ago are as follow:\nKnockoutJS ( release date: July 5, 2010 )\nAngularJS ( release date: October 20, 2010 )\nBackboneJS ( release date: October 13, 2010 )\nUnderscore ( release date: October 28, 2009 )\nJQuery ( release date: August 26, 2006 )\nReact, Angular and Vue are dominating the market in 2020 but this was not the case 10 years ago. Knockout, AngularJS and backbone were the rising stars and were developers favourites.\nMEAN / MERN Stack is the dominating stack in 2020 but a decade ago the LAMP Stack ( “L” Linux — “A” Apache — “M” MySQL — “P” PHP ) that was taking over the community by storm. This is how our old friend Mark Zuckenberg build Facebook back from his dorm for the first time.\nHowever, at the end of 2010 things started to change with the launch of client-side frameworks and AngularJS was leading all the framework since it was powered by Google and was my first framework love.","__v":0},{"pictures":["https://res.cloudinary.com/beloved/image/upload/v1595826392/Udemy/a0p8ezf3qoiye0tadbkc.jpg"],"_id":"5f1e60d8f055ec0017f6377c","title":"State management with Recoil js","body":"Her hair was windswept as she rode in the black convertible.\nThe spa attendant applied the deep cleaning mask to the gentleman’s back.","description":"If you like tuna and tomato sauce- try combining the two. It’s really not as bad as it sounds.\nShe did a happy dance because all of the socks from the dryer matched.\nFlesh-colored yoga pants were far worse than even he feared.\nHe decided water-skiing on a frozen lake wasn’t a good idea.\nHe found the end of the rainbow and was surprised at what he found there.\nHe wondered if she would appreciate his toenail collection.\nThere were white out conditions in the town; subsequently, the roads were impassable.\nFor the 216th time, he said he would quit drinking soda after this last Coke.\nI am counting my calories, yet I really want dessert.\nIn that instant, everything changed.","__v":0}]},"__N_SSG":true}